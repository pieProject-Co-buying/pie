<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.pie.pieProject.DAO.IChatDao">
	
	
	<!-- 메세지 저장 -->
	<insert id="saveMsg" parameterType="java.util.Map">
        INSERT INTO pie_messages (roomName, roomNumber, sender_id, sender, message, sendTime) VALUES (#{roomName}, #{roomNumber}, #{userId}, #{userName}, #{message}, sysdate)
    </insert>
    
    
    
    
    <select id="getRoomInfo" resultType="com.pie.pieProject.DTO.RoomDto">
		SELECT A.roomNumber,
			B.nickname AS joinMemNickname,
			C.nickname AS managerMemNickname
		FROM 
			chatRoom A,
			member_user B,
			member_user C
		WHERE
			A.roomNumber = #{roomNumber}
			AND B.id = A.joinMemNum
			AND C.id = A.managerMemNum
	</select>
	
	
	
	
	<!-- 채팅방 생성 -->
	<insert id="insertRoom" parameterType="String">
<!--        INSERT INTO pie_chatRoom (roomNumber, roomName, partyMem) VALUES (#{roomNumber}, #{roomName}, #{nickName})-->
		MERGE 
		   INTO chatRoom a
		USING dual
		   ON (a.managerMemNum = #{managerMemNum} AND a.joinMemNum = #{joinMemNum})
		 WHEN NOT MATCHED THEN
		      INSERT (a.roomNumber, a.managerMemNum, a.joinMemNum)
		      VALUES ((SELECT NVL(MAX(roomNumber) + 1, 1) FROM chatRoom), #{managerMemNum}, #{joinMemNum}
	      )
    <selectKey resultType="int" keyProperty="roomNumber" order="AFTER">
        SELECT MAX(roomNumber) FROM chatRoom
    </selectKey>
    </insert>
    
    
    
    
    
    
    <insert id="insertRoomUser">
		MERGE 
		   INTO chatRoomUser a
		USING dual
		   ON (a.roomNumber = #{roomNumber} AND a.joinMemNum = #{userId})
		 WHEN NOT MATCHED THEN
		      INSERT (a.roomNumber, a.joinMemNum)
		      VALUES (#{roomNumber}, #{userId}
	      )
	</insert>
    
    
    
    
    <!-- 안씀 -->
    <!-- 채팅방 목록 불러오기 -->
	<select id="roomList" resultType="com.pie.pieProject.DTO.RoomDto">
		select * from pie_chatRoom order by roomNumber asc
	</select>
	
	<!-- 채팅방 목록 불러오기 -->
	<!--<select id="room" resultType="com.pie.pieProject.DTO.RoomDto">
		select * from pie_chatRoom where partyMem = #{param1}
	</select>-->
	
	
	
	
	
	
	<select id="roomListByID" parameterType="String" resultType="com.pie.pieProject.DTO.ChatRoomUserDto">
		<!--select * from pie_chatRoom where partyMem = '@${param1}@${param2}' or partyMem = '@${param2}@${param1}'-->
		SELECT
		  A.roomNumber,
		  A.joinMemNum,
		  B.nickname
	    FROM
	    	chatRoom A,
	    	member_user B
    	WHERE
    		A.managerMemNum = B.id
    		AND A.joinMemNum = #{joinMemNum}
	</select>
	
	
	
	
	
	<select id="roomListByMine" resultType="com.pie.pieProject.DTO.RoomDto">
		select * from pie_chatRoom where partyMem like '%@${param1}@%' or partyMem like '%@${param1}' order by roomnumber desc
	</select>
	
	
	
	
	
	<!-- 채팅리스트 가져오기 -->
	<select id="chatList" resultType="com.pie.pieProject.DTO.ChatDto">
		select * from pie_messages where roomNumber = #{roomNumber} OR roomNumber = (select 
				B.roomNumber from chatRoom A,
				chatRoom B
				WHERE A.ROOMNUMBER = #{roomNumber}
				AND A.MANAGERMEMNUM = B.JOINMEMNUM AND A.JOINMEMNUM = B.MANAGERMEMNUM)
		order by sendTime asc
	</select>
	



</mapper>